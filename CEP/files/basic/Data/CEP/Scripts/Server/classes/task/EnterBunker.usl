class CEnterBunker inherit CTask

	var CObjHndl 		m_xChar;
	var CObjHndl		m_xBunker;
	var int	 			m_iState;
	var int				m_iRetryCounter;
	
	const int			STATE_QUIT	= 0;
	const int			STATE_GOTO 	= 1;
	const int			STATE_ON_THE_WAY = 2;
	const int			STATE_ENTER	= 3;
	
	export constructor()
		SetName("EntrBnkr");
		SetCivil(false);
	endconstructor;
	
	export proc void Save(^CUOFWriterNode p_pxWriterNode)
		super.Save(p_pxWriterNode);
		var CFourCC xType="EnBu";
		var ^CUOFWriterNode pxWalk=p_pxWriterNode^.AddSubChunk(xType,2);
		var ^CArc pxArc=^(pxWalk^.GetArc());		
		m_xChar.DoKArc(pxArc^);
		m_xBunker.DoKArc(pxArc^);
		(pxArc^) << m_iState;
		(pxArc^) << m_iRetryCounter;
		pxWalk^.Close();
	endproc;

	export proc void Load(^CUOFReaderNode p_pxReaderNode)
		if(p_pxReaderNode^.GetType()=="EnBu")then
			var ^CArc pxArc=^(p_pxReaderNode^.GetArc());
			m_xChar.DoKArc(pxArc^);
			m_xBunker.DoKArc(pxArc^);
			(pxArc^) << m_iState;
			if(pxArc^.GetVersion()>=2) then (pxArc^) << m_iRetryCounter; endif;
		else
			super.Load(p_pxReaderNode);
		endif;
	endproc;	

	export proc bool Init(CObjHndl p_xChar, CObjHndl p_xBunker)
		m_xChar = p_xChar;
		m_xBunker = p_xBunker;
		return true;
	endproc;

	proc void USLOnEnter(^CState p_pxFrom, ^CState p_pxTo)
		if(!m_xChar.IsValid() || !m_xBunker.IsValid()) then EndTask(); return; endif;
		m_iState = STATE_GOTO;
		m_iRetryCounter=5;
	endproc;

	proc void USLOnTick(int p_iTime)
		var ^CCharacter pxC = cast<CCharacter>(m_xChar.GetObj());
		var ^CBunker	pxB = cast<CBunker>(m_xBunker.GetObj());
		
		if(pxC!=null && pxB!=null) then
			if(m_iState==STATE_GOTO) then
				var vec3 vP;
				pxC^.AdvanceAction(m_xBunker, 1.0f, pxC^.GetMaxSpeed());
				m_iState = STATE_ON_THE_WAY;
				return;
			elseif(m_iState==STATE_ON_THE_WAY) then
				//if(pxC^.HasAction()) then return; endif; //???
				//KLog.LogWarn("CHP",pxC^.GetName()+" R:"+pxB^.GetRadius().ToString()+" D:"+(pxB^.GetPos()-pxC^.GetPos()).Abs2().ToString()+" LOS:"+bLOS.ToString());
				var real fMaxDis = 3.0f;
				var real fMaxDiff = 12.0f;
				if(pxB^.GetClassName()!="hu_bunker")then
					fMaxDis = pxB^.GetCollisionRadius();
					fMaxDiff = pxB^.GetCollisionRadius()+10.0f;
				endif;
				var bool bLOS=pxC^.CheckLineOfSightFight(pxB,fMaxDis);
				if(bLOS&&(pxB^.GetPos()-pxC^.GetPos()).Abs2() < fMaxDiff) then 
					m_iState=STATE_ENTER; 
				else
					if(m_iRetryCounter--<=0) then m_iState=STATE_QUIT; return; endif;
					pxC^.WaitAction(0.8f);
					m_iState=STATE_GOTO; //retry
				endif;
				return;
			elseif(m_iState==STATE_ENTER) then
				pxB^.AddChar(m_xChar);
				m_iState=STATE_QUIT;
				return;
			else
				EndTask();
				return;
			endif;
		endif;
	endproc;

	proc void USLOnLeave(^CState p_pxFrom, ^CState p_pxTo)
	endproc;

	export proc bool Break()
		if(m_xChar.IsValid()) then m_xChar.GetObj()^.TerminateAction(); endif;
		EndTask();
		return false;
	endproc;

	export proc void Skip()
	endproc;

	export proc void EndTask()
		UpdateAggressionPos(m_xChar);
		super.EndTask();
	endproc;
endclass;