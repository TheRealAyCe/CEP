class CAiGoalMarketPlaceAttack inherit CAiGoalGeneralAttack

	var CAiObjWrap	m_xLastEnemy;
	var bool		m_bWeKilledACart;
	var real		m_fAttackRadius;
	var real		m_fAttackRadiusSqare;
	var string		m_sBehaviorType;
	
	
	///Init
	export proc bool Init(^CAiBrain p_pxBrain)
		super.Init(p_pxBrain);
		
		m_pxBrain = p_pxBrain;
		if(m_pxBrain==null)then return false; endif;
		
		m_pxSensor=^(m_pxBrain^.GetSensor());
		if(m_pxSensor==null) then return false; endif;
		
		m_iPlayerID=m_pxBrain^.GetPlayerId();
		m_sPlayerID=m_iPlayerID.ToString();
		
		var int iNumPlayers=1+m_pxSensor^.GetNumPlayers();
		var int iType = 1+Random.GetInt()%iNumPlayers;
		
		var ^CAiModuleControlDefault pxCM=cast<CAiModuleControlDefault>(m_pxBrain^.GetControlModule());
		SetThinkWait(pxCM^.GetDifficultyInt()+iType);
		m_sBehaviorType=pxCM^.GetBehaviorType();
		
		m_sState = "new";
		m_bWeKilledACart = false;
		m_fAttackRadius = 70.0;
		m_fAttackRadiusSqare = m_fAttackRadius * m_fAttackRadius + 100.0;
		
		m_xOnEnemiesFound = OnEnemiesFound;
		m_xOnCalculateEnemyValue = OnCalculateValue;
		
		GetEnemyQuery().AddMyEnemiesToSearch(m_iPlayerID, true);
		GetEnemyQuery().SetClass("hu_cart");
		GetEnemyQuery().SetClass("aje_trade_dino", true);
		GetEnemyQuery().SetClass("ninigi_cart", true);
                GetEnemyQuery().SetClass("seas_triceratops_resource_collector", true);
			
		return true;
	endproc;

	
	///OnEnemiesFound
	proc void OnEnemiesFound(ref CAiObjWrapList p_rxList)
		m_xEnemies.CopyFrom(p_rxList);
		if(m_xEnemies.NumEntries()>0)then
			m_xLastEnemy = m_xEnemies[0];
		endif;
	endproc;
	
	
	///OnCalculateValue
	proc void OnCalculateValue(ref CAiObjWrap p_rxEnemy, ref real p_rfValue)
		if(p_rxEnemy.IsSameAs(m_xLastEnemy))then
			p_rfValue+=100.0;
		endif;
	endproc;


	///Start
	export proc bool Start(^CAiAttackInfo p_pxAttackInfo)
		if(m_pxBrain==null) then return false; endif;
		if(super.Start(p_pxAttackInfo) == false)then return false; endif;
		
		if(m_sBehaviorType=="Schnecke"&&CAiUtilityMgr.Get()^.GetCurrentAge(m_pxBrain)<4)then
			return false;
		endif;
		
		GetEnemyQuery().RegionCircle(p_pxAttackInfo^.GetPos(), m_fAttackRadius);
		return true;
	endproc;

	
	///Think
	export proc void Think()
		super.Think();		
		if(m_pxSensor==null) then return; endif;
		if(m_pxBrain==null) then return; endif;

		var ^CAiGoalMinistryOfDefense	pxMOD = GetMOD();

		if(pxMOD == null)then
			return;
		endif;
		
		if(m_sState=="new")then
			var int iAge = Math.Min(CAiUtilityMgr.Get()^.GetCurrentAge(m_pxBrain),5);
			var CAiObjWrapList xUnits;

			m_xAllocator.StartAsSupervisor();
			if(pxMOD^.QueryUnits(xUnits, 0, 6, 0.5, 0, m_xEnemies) == false)then
				m_bMODSpawn = true;
				m_pxAttackInfo^.GetResult()="squad allocation failed (impossible)";
				m_pxAttackInfo^.NotifyOnFailed();
				Deactivate();
			else
				m_xAllocator.AddUnits(xUnits);
				SeparateUnits();
				m_xEnemies.CopyFrom(m_pxAttackInfo^.GetTargets());
				if(TransferUnits() == true)then
					m_sState = "transfering";
				else
					StartSitOn();
					m_sState = "sit_on";
				endif;
			endif;
		elseif(m_sState=="transfering")then
			if(m_bTransferSucceeded == true)then
				StartSitOn();
				m_sState = "sit_on";
			endif;
		elseif(m_sState=="sit_on")then
			if(m_bTransportersReady == true)then
				StartAllAttacks();
				m_pxSensor^.SetAggroState(m_xFighters, 0);
				m_pxSensor^.SetAggroState(m_xSupporters, 0);
				m_sState = "fighting";
			endif;
		elseif(m_sState=="fighting")then
			if(!UpdateFighters())then
				m_pxAttackInfo^.GetResult()="all fighters are dead!";
				SetFailedPosition(m_vFightersPos);
				m_pxAttackInfo^.NotifyOnFailed();
				Deactivate();
				return;
			endif;
			if(m_xLastEnemy.IsValid() == false)then
				m_bWeKilledACart = true;
			endif;
			if(m_bWeKilledACart == true)then
				if(CheckCompletion())then
					m_pxAttackInfo^.GetResult()="attack succeded!";
					m_pxAttackInfo^.NotifyOnSucceeded();
					Deactivate();
					return;
				endif;
			endif;
			if((m_vFightersPos - m_pxAttackInfo^.GetPos()).Abs2S() > m_fAttackRadiusSqare)then //70m
				CAiUtilityMgr.Get()^.WalkToPos(m_pxSensor, m_xFighters, m_pxAttackInfo^.GetPos());
			else
				if(UpdateNearbyEnemies())then
				endif;
			endif;
			UpdateSupporters();
		endif;
			
	endproc;

endclass;
