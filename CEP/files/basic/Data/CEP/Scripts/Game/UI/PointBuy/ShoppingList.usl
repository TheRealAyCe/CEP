class CShoppingList inherit CWindow
	
	var ^CPointBuyMenu	m_pxPointBuyMenu;
	var ^CTabCtrl		m_pxTabCtrl;
	var ^CShoppingTab 	m_pxInfantryTab;
	var ^CShoppingTab 	m_pxCavalryTab;
	var ^CShoppingTab 	m_pxHeroesTab;
	
	export constructor()
		if(!InitFromResource("UI/PointBuy/ShoppingList","ShoppingList")) then
			return;
		endif;
	endconstructor;
	
	export proc void Init(^CPointBuyMenu p_pxPointBuyMenu)		
		m_pxPointBuyMenu=p_pxPointBuyMenu;
		m_pxInfantryTab=new CShoppingTab(0,this);
		m_pxCavalryTab=new CShoppingTab(1,this);
		m_pxHeroesTab=new CShoppingTab(2,this);
		m_pxTabCtrl=cast<CTabCtrl>(GetControl("TabCtrl"));
		m_pxTabCtrl^.AddTab(CLocalizer.Get().Translate("_UI_ShopList_Tab_Infantry"),m_pxInfantryTab,CLocalizer.Get().Translate("_UI_Tab_Infantry_TT"));
		m_pxTabCtrl^.AddTab(CLocalizer.Get().Translate("_UI_ShopList_Tab_Cavalry"),m_pxCavalryTab,CLocalizer.Get().Translate("_UI_Tab_Cavalry_TT"));
		m_pxTabCtrl^.AddTab(CLocalizer.Get().Translate("_UI_ShopList_Tab_Heroes"),m_pxHeroesTab,CLocalizer.Get().Translate("_UI_Tab_Heroes_TT"));
		m_pxTabCtrl^.m_xOnChangeTab=OnChangeTab;
	endproc;
	
	export proc bool Update(string p_sTribe,^CPropDB.CNode p_pxRestrictions)	
		if(m_pxPointBuyMenu!=null)then			
			m_pxPointBuyMenu^.OnSelectShoppingUnit(null);
		endif;
		m_pxInfantryTab^.Init(p_sTribe,p_pxRestrictions);
		m_pxCavalryTab^.Init(p_sTribe,p_pxRestrictions);
		m_pxHeroesTab^.Init(p_sTribe,p_pxRestrictions);
		OnChangeTab(m_pxTabCtrl^.GetCurrentTab());
		return true;
	endproc;
	
	export proc bool UpdateInfoFromPyramid(string p_sClassName)
		m_pxInfantryTab^.UpdateInfo(p_sClassName);
		m_pxCavalryTab^.UpdateInfo(p_sClassName);
		m_pxHeroesTab^.UpdateInfo(p_sClassName);
		return true;
	endproc;
	
	export proc bool IsHero(string p_sClass)
		return m_pxInfantryTab^.IsHero(p_sClass);
	endproc;
	
	export proc ^CShoppingTab.CShoppingInfo GetSelection()
		var ^CShoppingTab pxCurTab=cast<CShoppingTab>(m_pxTabCtrl^.GetTabWindow(m_pxTabCtrl^.GetCurrentTab()));
		if(pxCurTab!=null)then
			return pxCurTab^.GetSelection();
		endif;
		return null;
	endproc;
	
	proc bool OnChangeTab(int p_iTab)
		var ^CShoppingTab.CShoppingInfo pxShoppingInfo=null;
		if(p_iTab==0)then
			pxShoppingInfo=m_pxInfantryTab^.GetSelection();
		elseif(p_iTab==1)then
			pxShoppingInfo=m_pxCavalryTab^.GetSelection();
		else
			pxShoppingInfo=m_pxHeroesTab^.GetSelection();
		endif;
		OnItemSelect(pxShoppingInfo);		
		var ^CShoppingTab pxCurTab=cast<CShoppingTab>(m_pxTabCtrl^.GetTabWindow(p_iTab));
		if(pxCurTab!=null)then
			var string sClass;
			if(pxShoppingInfo!=null)then
				sClass=pxShoppingInfo^.m_sClassName;
			endif;
			pxCurTab^.UpdateInfo(sClass);
		endif;		
		return true;		
	endproc;
	
	export proc void OnItemSelect(^CShoppingTab.CShoppingInfo p_pxShoppingInfo)
		if(m_pxPointBuyMenu!=null)then			
			m_pxPointBuyMenu^.OnSelectShoppingUnit(p_pxShoppingInfo);
		endif;
	endproc;
	
	export proc void OnItemDblClick(^CShoppingTab.CShoppingInfo p_pxShoppingInfo)
		if(m_pxPointBuyMenu!=null)then			
			m_pxPointBuyMenu^.OnBuyUnit(p_pxShoppingInfo);
		endif;
	endproc;	
endclass;

class CShoppingTab inherit CWindow
		
	//class CShoppingInfo inherit CPane	
	class CShoppingInfo inherit CItemData
		class ShoppingIcon inherit CCard
		
			var string m_sClass;
			export var procref<bool> m_xOnSelect;
		
			export constructor()
			endconstructor;
		
			export destructor()
			enddestructor;
			
			export proc void SetClass(string p_sClass)
				m_sClass=p_sClass;
			endproc;
			
			export proc string GetClass()
				return m_sClass;
			endproc;			
			
			export proc bool OnClick(bitset p_dwKeyModifier)
				if (!m_xOnSelect.IsNull()) then
					m_xOnSelect.Call();
				endif;
				return(true);
			endproc;
			
		endclass;
		export var	string			m_sCategory;
		export var	string			m_sClassName;
		export var	string			m_sIconPath;
		export var	array int		m_aiCostAtLevel;
		export var string			m_sName;
		export var string			m_sDescription;

		export var procref<bool> m_xOnSendUpdate;
		export var procref<bool,bitset> m_xOnDoubleClick;
		export var procref<void,int> m_xOnUpdateSelection;
		
		var int						m_iIndex;
		
		export constructor()
			m_iIndex = 0;
		endconstructor;
		
		export destructor()
			CPointBuyList.ShutStatic();
		enddestructor;
				
		export proc bool OnDoubleClick(bitset p_dwParam)			
			if(!m_xOnDoubleClick.IsNull())then
				m_xOnDoubleClick.Call(p_dwParam);
			endif;
			return(true);
		endproc;
		
		export proc void SetIndex(int p_iIndex)
			m_iIndex = p_iIndex;
		endproc;
				
		proc bool HasLevel(int p_iLevel)
			if(m_aiCostAtLevel[p_iLevel-1]==(-1))then
				return(false);
			else
				return(true);
			endif;
		endproc;
		
	endclass	
	
	var ^CDesktop					m_pxDesktop;
	var ^CShoppingList				m_pxOwner;
	var array ^CShoppingInfo		m_apxAvailableUnits;
	var CHashStringString			m_hClassDescMap;
	var int							m_iType;
	var ^CList						m_pxItemList;
	var ^CUIFloatBox				m_pxDescription;
	
	var ^CScrollWindow2				m_pxScrollWindow;
	//Filter Buttons
	var ^CButton					m_pxCharactersButton;
	var ^CButton					m_pxCavalryButton;
	var ^CButton					m_pxHeroesButton;
	var int							m_iSelectedUnit;
	
	export var procref<bool> 		m_xOnSendUpdateToPyramid;	
	
		
	export constructor(int p_iType,^CShoppingList p_pxOwner)
		if(!InitFromResource("UI/PointBuy/ShoppingList","ShoppingTab")) then
			return;
		endif;
		m_iType=p_iType;
		m_pxOwner=p_pxOwner;
		m_pxDesktop=CClientWrap.GetDesktop();
		
		SetFrame(false);		
		m_iSelectedUnit=0;
		
		m_pxItemList = cast<CList>(GetControl("List"));
		m_pxItemList^.SetXWindowFocus(true);
		m_pxItemList^.m_xOnLBtnDblClick = OnDblClick;
		m_pxItemList^.m_xOnSelect = OnSelect;
		m_pxItemList^.m_xOnHoverItem = OnHoverItem;
		m_pxItemList^.SetHoverItems(true);
		//pxBackground^.AddChildWithLayout(m_pxScrollWindow,"list");
		
		m_pxDescription=cast<CUIFloatBox>(GetControl("Description"));		
	endconstructor;
	
	destructor();
		var int i,iC=m_apxAvailableUnits.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			delete m_apxAvailableUnits[i];
		endfor;
	enddestructor;
	
	proc bool OnDblClick()
		var int iIdx = m_pxItemList^.GetSelectedItem();
		if(iIdx<0)then return false; endif;
		var ^CShoppingInfo pxInfo = cast<CShoppingInfo>(m_pxItemList^.GetItemData(iIdx));
		if(pxInfo==null)then return false; endif;
		m_pxOwner^.OnItemDblClick(pxInfo);
		return true;
	endproc;
	
	proc bool OnSelect()

		var int iIdx = m_pxItemList^.GetSelectedItem();
		if(iIdx<0)then return false; endif;
		var ^CShoppingInfo pxInfo = cast<CShoppingInfo>(m_pxItemList^.GetItemData(iIdx));
		if(pxInfo==null)then return false; endif;		
		m_pxOwner^.OnItemSelect(pxInfo);
		UpdateInfo(pxInfo^.m_sClassName);
		return true;
	endproc;
	
	proc bool OnHoverItem(int p_iItem)
		var ^CShoppingInfo pxInfo=cast<CShoppingInfo>(m_pxItemList^.GetItemData(p_iItem));
		if(pxInfo==null)then
			pxInfo=GetSelection();
		endif;	
		UpdateInfo(pxInfo^.m_sClassName);
		return true;
	endproc;
	
	export proc bool Init(string p_sTribe,^CPropDB.CNode p_pxRestrictions)
		//Clear
		var int i,iC=m_apxAvailableUnits.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			delete m_apxAvailableUnits[i];
		endfor;
		m_apxAvailableUnits=0;
		m_hClassDescMap.Init();
			
		if(p_sTribe=="Random")then
			Random.Seed();
			var int iTribe=(Random.GetInt()%3);
			if(iTribe==0)then
				p_sTribe="Hu";
			elseif(iTribe==1)then
				p_sTribe="Aje";
			elseif(iTribe==2)then
				p_sTribe="Ninigi";
			elseif(iTribe==3)then
				p_sTribe="SEAS";
			endif;
		endif;		
		var ^CPlayer pxPlayer=^(CGameWrap.GetClient().GetPlayer());
		if(pxPlayer==null)then
			CGameWrap.LogError("Controller.Place","Player invalid!");
			return(false);
		endif;		
		var string sTribe=p_sTribe;
		//var CTechTree xTechTree=pxPlayer^.GetPlayerTechTree();
		var CTechTree xTechTree=CGameWrap.GetGlobalTechTree();
		
		var ^CPropDB pxCatalogue=^(CPointBuyList.Get().GetList());
		if(pxCatalogue==null)then return(false);endif;
		//Units		
		var ^CPropDB.CNode pxUnits=pxCatalogue^.GetRoot().Get("Units");
		if(pxUnits==null)then return(false);endif;
		var array ^CPropDB.CNode	apxAllUnits;
		var ^CPropDB.CNode pxNode;
		
		pxNode = pxUnits^.Get(sTribe);
		if(pxNode!=null)then
			apxAllUnits.AddEntry(pxNode^.Get("Character"));
			apxAllUnits.AddEntry(pxNode^.Get("Animals"));
			apxAllUnits.AddEntry(pxNode^.Get("Vehicles"));
			apxAllUnits.AddEntry(pxNode^.Get("Ship"));
		endif;
		
		apxAllUnits.AddEntry(pxUnits^.Get("Heroes"));
		
		var array string asFilterUnits;
		if(p_pxRestrictions!=null)then
			var ^CPropDB.CNode pxInfantry=p_pxRestrictions^.FindNode("Chars/Infantry/"+sTribe,false);
			var ^CPropDB.CNode pxCavalry=p_pxRestrictions^.FindNode("Chars/Cavalry/"+sTribe,false);
			var ^CPropDB.CNode pxHeroes=p_pxRestrictions^.FindNode("Chars/Heroes/"+sTribe,false);
			if(pxInfantry!=null)then
				var int i,iC=pxInfantry^.NumSubs();
				for(i=0)cond(i<iC)iter(i++)do
					asFilterUnits.AddEntry(pxInfantry^.Get(i).Name());
				endfor;
			endif;
			if(pxCavalry!=null)then
				var int i,iC=pxCavalry^.NumSubs();
				for(i=0)cond(i<iC)iter(i++)do
					asFilterUnits.AddEntry(pxCavalry^.Get(i).Name());
				endfor;
			endif;
			if(pxHeroes!=null)then
				var int i,iC=pxHeroes^.NumSubs();
				for(i=0)cond(i<iC)iter(i++)do
					asFilterUnits.AddEntry(pxHeroes^.Get(i).Name());
				endfor;
			endif;
		endif;
		
		
		iC=apxAllUnits.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var int j,iTypeCount=apxAllUnits[i]^.NumSubs();
			for(j=0)cond(j<iTypeCount)iter(j++)do
				

				var string sClassName=(apxAllUnits[i]^)[j].Name();
				var string sCategory=apxAllUnits[i]^.Name();
				//Iconpaths
				var string sType;
				if(sCategory=="Character")then sType="CHTR";endif;
				if(sCategory=="Animals")then sType="ANML";endif;
				if(sCategory=="Vehicles")then sType="VHCL";endif;
				if(sCategory=="Ship")then sType="SHIP";endif;
				if(sCategory=="Heroes")then
					if(sClassName.Find("Stina")!=-1)then
						sType="ANML";
						sClassName="special_eusmilus";
					elseif(sClassName.Find("Miyagi_s0")!=-1)then
						sClassName="special_baryonyx";
						sType="ANML";
					else
						sType="CHTR";
					endif;
					//L CGameWrap.LogWarning("PointBuy",sClassName+" "+sType+" "+sCategory);					
				endif;
				
				var string sPath="/Objects/"+sTribe+"/"+sType+"/"+sClassName;
				if(sCategory=="Heroes")then	
					sPath="/Objects/Special/"+sType+"/"+sClassName;
				endif;
				var ^CTechTree.CNode pxUnitPath=xTechTree.FindNode(sPath);
				if(pxUnitPath==null)then					
					continue;
				endif;
				var string sDescription=pxUnitPath^.GetSubValue("description");
				if(sDescription.Find("tutorial")==-1)then
					m_hClassDescMap.Set(sClassName,sDescription);
				endif;
				if(p_pxRestrictions!=null)then
					if(asFilterUnits.FindEntry(sClassName)==-1)then						
						continue;
					endif;
				endif;						
				
				var string sIcon=sClassName;
				//if(sCategory=="Heroes")then	sIcon.Delete(0,"special_".GetLength());endif;
				var ^CShoppingInfo pxInfo=new CShoppingInfo();
				pxInfo.SetInvalidateMsg(true);
				pxInfo^.m_sClassName=sClassName;				
				pxInfo^.m_sDescription=sDescription;
				pxInfo^.m_sName=sDescription;
				pxInfo^.m_sCategory=sCategory;
				pxInfo^.m_sIconPath="layer "+sClassName;								
				pxInfo^.m_xOnSendUpdate=OnSendUpdate;				
				pxInfo^.m_xOnUpdateSelection=OnUpdateSelection;				
				var int k,iIndex=(apxAllUnits[i]^)[j].NumSubs();
				pxInfo^.m_aiCostAtLevel=5;
				var int iCostCount,iLevels=pxInfo^.m_aiCostAtLevel.NumEntries();
				for(iCostCount=0)cond(iCostCount<iLevels)iter(iCostCount++)do
					pxInfo^.m_aiCostAtLevel[iCostCount]=(-1);
				endfor;
				for(k=0)cond(k<iIndex)iter(k++)do
					var string sLevel=(apxAllUnits[i]^)[j][k].Name();
					if(sLevel.Right(1)=="1")then
						pxInfo^.m_aiCostAtLevel[0]=(apxAllUnits[i]^)[j][k].ValueI();
					elseif(sLevel.Right(1)=="2")then
						pxInfo^.m_aiCostAtLevel[1]=(apxAllUnits[i]^)[j][k].ValueI();
					elseif(sLevel.Right(1)=="3")then
						pxInfo^.m_aiCostAtLevel[2]=(apxAllUnits[i]^)[j][k].ValueI();
					elseif(sLevel.Right(1)=="4")then
						pxInfo^.m_aiCostAtLevel[3]=(apxAllUnits[i]^)[j][k].ValueI();
					elseif(sLevel.Right(1)=="5")then
						pxInfo^.m_aiCostAtLevel[4]=(apxAllUnits[i]^)[j][k].ValueI();	
					endif;
					//pxInfo^.m_aiCostAtLevel.AddEntry((apxAllUnits[i]^)[j][k].ValueI());
				endfor;
				m_apxAvailableUnits.AddEntry(pxInfo);
			endfor;
		endfor;		
		//UpdateInfo();
		UpdateList();
		return(true);
	endproc;
	
	export proc bool IsHero(string p_sClass)
		var int i,iC=m_apxAvailableUnits.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			if((m_apxAvailableUnits[i]^.m_sCategory=="Heroes")&&(m_apxAvailableUnits[i]^.m_sClassName==p_sClass)) then return true; endif;
		endfor;
		return false;
	endproc;
	
	export proc bool UpdateList()
		var int i, iC = m_pxItemList^.NumItems();
		for(i=0)cond(i<iC)iter(i++)do
			//m_pxItemList^.RemoveChild(m_pxItemList^.GetItemWindow(i));
		endfor;
		m_pxItemList^.Clear();
		var string	sType; 
		if(m_iType==0)then	sType="Character";endif;
		if(m_iType==1)then	sType="Cavalry";endif;
		if(m_iType==2)then	sType="Heroes";endif;
		iC=m_apxAvailableUnits.NumEntries();
		var int iPosY=0;
		for(i=0)cond(i<iC)iter(i++)do
			var string sCat = m_apxAvailableUnits[i]^.m_sCategory;
			if(m_iType==1)then
				if(sCat!="Vehicles" && sCat!="Animals" && sCat!="Ship")then continue; endif;
			else
				if(sCat!=sType)then	continue;endif;
			endif;
			//m_pxItemList^.AddItem("",m_apxAvailableUnits[i]);
			var ^CShoppingInfo pxInfo=m_apxAvailableUnits[i];
			
			var string sBitmapNormal="2, "+pxInfo^.m_sIconPath+", layer card_frame";
			var string sBitmapHover="2, "+pxInfo^.m_sIconPath+", layer card_frame_hover";			
			var CBitmapPtr pxIconNormal=CGameInst.GetBitmapMgr().GetBlendBitmap(sBitmapNormal)^.GetBitmap();		
			var CBitmapPtr pxIconHover=CGameInst.GetBitmapMgr().GetBlendBitmap(sBitmapHover)^.GetBitmap();		
			
			var string sItemName;
			CClientWrap.GetUIMgr().GetToopTipText(pxInfo^.m_sName, sItemName );
			var int iIdx=m_pxItemList^.AddItem(sItemName,pxInfo);			
			m_pxItemList^.SetItemBitmap(iIdx,pxIconNormal,pxIconHover,pxIconHover,pxIconNormal);		
			m_apxAvailableUnits[i]^.SetIndex(iIdx);
		endfor;

		if(m_pxItemList^.NumItems()>0)then
			m_pxItemList^.Select(0,true);
			OnSelect();
		endif;
		return(true);
	endproc;

	proc bool OnSendUpdate()
		if (!m_xOnSendUpdateToPyramid.IsNull()) then
			m_xOnSendUpdateToPyramid.Call();
		endif;
		//UpdateInfo();
		return(true);
	endproc;
	
	export proc bool UpdateInfo(string p_sClassName)
		var string sDescription;
		m_hClassDescMap.Get(p_sClassName,sDescription);
		var string sTitle;
		var string sText = CClientWrap.GetUIMgr().GetToopTipTextLong(sDescription,sTitle);
		var string sScript=CToolTipWindow.GenerateMsgScript(sTitle,sText);		
		m_pxDescription^.SetText("\\{cp}\\{cogiw_1}"+sScript+"\\{cp}\\{p}");
		return true;
	endproc;
		
	proc void OnUpdateSelection(int p_iSelection)
		m_pxItemList^.m_xOnSelect.Clear();
		m_pxItemList^.Select(p_iSelection,true);
		m_pxItemList^.m_xOnSelect = OnSelect;		
	endproc;
	
	export proc ^CShoppingTab.CShoppingInfo GetSelection()
		var int iSelection=m_pxItemList^.GetSelectedItem();
		if(iSelection!=-1) then 
			var ^CShoppingInfo pxInfo = cast<CShoppingInfo>(m_pxItemList^.GetItemData(iSelection));
			return pxInfo;
		else 
			return null;
		endif;		
	endproc;
	
	
endclass;

class CPointBuyList

	static var ^CPointBuyList ms_pxInstance;
	var CPropDB m_xPriceList;

	constructor()
		m_xPriceList.Load(CClientWrap.GetUrsRelPath()+"/Data/Base/Scripts/Server/settings/NewPointBuyCosts.txt");
	endconstructor;

	export static proc ref CPointBuyList Get()
		if(ms_pxInstance==null)then
			ms_pxInstance=new CPointBuyList;
		endif;
		return(ms_pxInstance^);
	endproc;

	export static proc void ShutStatic()
		delete ms_pxInstance;
	endproc;

	export proc ref CPropDB GetList()
		return m_xPriceList;
	endproc;
endclass;
